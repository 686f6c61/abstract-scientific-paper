{"ast":null,"code":"var _jsxFileName = \"/home/the00b/Escritorio/RAG_Gradio/client/src/contexts/PdfContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfContext = /*#__PURE__*/createContext();\nexport const usePdf = () => {\n  _s();\n  return useContext(PdfContext);\n};\n_s(usePdf, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const PdfContextProvider = ({\n  children\n}) => {\n  _s2();\n  const [pdfs, setPdfs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedPdfs, setSelectedPdfs] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState(null);\n  const [summary, setSummary] = useState(null);\n  const [summaryLoading, setSummaryLoading] = useState(false);\n  const [queryLoading, setQueryLoading] = useState(false);\n\n  // Load PDFs when component mounts\n  useEffect(() => {\n    fetchPdfs();\n  }, []);\n\n  // Fetch all PDFs from the server\n  const fetchPdfs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await axios.get('/api/pdf/list');\n      setPdfs(response.data.data || []);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError('Error loading PDFs: ' + (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message));\n      console.error('Error fetching PDFs:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Upload a PDF\n  const uploadPdf = async file => {\n    try {\n      setLoading(true);\n      setError(null);\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await axios.post('/api/pdf/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Add the new PDF to the list\n      setPdfs(prev => [...prev, response.data.data]);\n      return response.data.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError('Error uploading PDF: ' + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message));\n      console.error('Error uploading PDF:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a PDF\n  const deletePdf = async id => {\n    try {\n      setLoading(true);\n      setError(null);\n      await axios.delete(`/api/pdf/delete/${id}`);\n\n      // Remove the PDF from the list\n      setPdfs(prev => prev.filter(pdf => pdf.id !== id));\n\n      // Remove from selected PDFs if it was selected\n      setSelectedPdfs(prev => prev.filter(pdfId => pdfId !== id));\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError('Error deleting PDF: ' + (((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message));\n      console.error('Error deleting PDF:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Toggle PDF selection\n  const togglePdfSelection = id => {\n    setSelectedPdfs(prev => {\n      if (prev.includes(id)) {\n        return prev.filter(pdfId => pdfId !== id);\n      } else {\n        return [...prev, id];\n      }\n    });\n  };\n\n  // Process a query using OpenAI\n  const processQuery = async query => {\n    try {\n      setQueryLoading(true);\n      setError(null);\n      const response = await axios.post('/api/openai/query', {\n        query,\n        fileIds: selectedPdfs.length > 0 ? selectedPdfs : undefined\n      });\n      setSearchResults(response.data.data);\n      return response.data.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError('Error processing query: ' + (((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || err.message));\n      console.error('Error processing query:', err);\n      throw err;\n    } finally {\n      setQueryLoading(false);\n    }\n  };\n\n  // Generate a summary using OpenAI\n  const generateSummary = async (query, language = \"Español\", modelParams = {\n    model: \"gpt-4o-mini\"\n  }) => {\n    try {\n      setSummaryLoading(true);\n      setError(null);\n\n      // Si modelParams es un string (para compatibilidad con versiones anteriores), convertirlo a objeto\n      const modelConfig = typeof modelParams === 'string' ? modelParams : modelParams.model;\n      const response = await axios.post('/api/openai/summary', {\n        query,\n        fileIds: selectedPdfs.length > 0 ? selectedPdfs : undefined,\n        language,\n        model: modelConfig,\n        // Añadir los parámetros avanzados separados del nombre del modelo\n        ...(typeof modelParams !== 'string' && {\n          temperature: modelParams.temperature,\n          max_tokens: modelParams.max_tokens,\n          top_p: modelParams.top_p,\n          frequency_penalty: modelParams.frequency_penalty,\n          presence_penalty: modelParams.presence_penalty\n        })\n      });\n      setSummary(response.data.data);\n      return response.data.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError('Error generating summary: ' + (((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || err.message));\n      console.error('Error generating summary:', err);\n      throw err;\n    } finally {\n      setSummaryLoading(false);\n    }\n  };\n\n  // Vectorize a PDF for better search\n  const vectorizePdf = async id => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await axios.post('/api/openai/vectorize', {\n        fileId: id\n      });\n\n      // Update the PDF in the list\n      setPdfs(prev => prev.map(pdf => pdf.id === id ? {\n        ...pdf,\n        vectorized: true\n      } : pdf));\n      return response.data.data;\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      setError('Error vectorizing PDF: ' + (((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || err.message));\n      console.error('Error vectorizing PDF:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Clear search results\n  const clearSearchResults = () => {\n    setSearchResults(null);\n  };\n\n  // Clear summary\n  const clearSummary = () => {\n    setSummary(null);\n  };\n  return /*#__PURE__*/_jsxDEV(PdfContext.Provider, {\n    value: {\n      pdfs,\n      loading,\n      error,\n      selectedPdfs,\n      searchQuery,\n      searchResults,\n      summary,\n      summaryLoading,\n      queryLoading,\n      fetchPdfs,\n      uploadPdf,\n      deletePdf,\n      togglePdfSelection,\n      setSearchQuery,\n      processQuery,\n      generateSummary,\n      vectorizePdf,\n      clearSearchResults,\n      clearSummary,\n      setError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s2(PdfContextProvider, \"etMLMvzXRqDLoB3EZb3vARoWJQM=\");\n_c = PdfContextProvider;\nvar _c;\n$RefreshReg$(_c, \"PdfContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","PdfContext","usePdf","_s","PdfContextProvider","children","_s2","pdfs","setPdfs","loading","setLoading","error","setError","selectedPdfs","setSelectedPdfs","searchQuery","setSearchQuery","searchResults","setSearchResults","summary","setSummary","summaryLoading","setSummaryLoading","queryLoading","setQueryLoading","fetchPdfs","response","get","data","err","_err$response","_err$response$data","message","console","uploadPdf","file","formData","FormData","append","post","headers","prev","_err$response2","_err$response2$data","deletePdf","id","delete","filter","pdf","pdfId","_err$response3","_err$response3$data","togglePdfSelection","includes","processQuery","query","fileIds","length","undefined","_err$response4","_err$response4$data","generateSummary","language","modelParams","model","modelConfig","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","_err$response5","_err$response5$data","vectorizePdf","fileId","map","vectorized","_err$response6","_err$response6$data","clearSearchResults","clearSummary","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/the00b/Escritorio/RAG_Gradio/client/src/contexts/PdfContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\nconst PdfContext = createContext();\n\nexport const usePdf = () => useContext(PdfContext);\n\nexport const PdfContextProvider = ({ children }) => {\n  const [pdfs, setPdfs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedPdfs, setSelectedPdfs] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState(null);\n  const [summary, setSummary] = useState(null);\n  const [summaryLoading, setSummaryLoading] = useState(false);\n  const [queryLoading, setQueryLoading] = useState(false);\n\n  // Load PDFs when component mounts\n  useEffect(() => {\n    fetchPdfs();\n  }, []);\n\n  // Fetch all PDFs from the server\n  const fetchPdfs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await axios.get('/api/pdf/list');\n      setPdfs(response.data.data || []);\n    } catch (err) {\n      setError('Error loading PDFs: ' + (err.response?.data?.message || err.message));\n      console.error('Error fetching PDFs:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Upload a PDF\n  const uploadPdf = async (file) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await axios.post('/api/pdf/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      // Add the new PDF to the list\n      setPdfs(prev => [...prev, response.data.data]);\n      return response.data.data;\n    } catch (err) {\n      setError('Error uploading PDF: ' + (err.response?.data?.message || err.message));\n      console.error('Error uploading PDF:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a PDF\n  const deletePdf = async (id) => {\n    try {\n      setLoading(true);\n      setError(null);\n      await axios.delete(`/api/pdf/delete/${id}`);\n      \n      // Remove the PDF from the list\n      setPdfs(prev => prev.filter(pdf => pdf.id !== id));\n      \n      // Remove from selected PDFs if it was selected\n      setSelectedPdfs(prev => prev.filter(pdfId => pdfId !== id));\n    } catch (err) {\n      setError('Error deleting PDF: ' + (err.response?.data?.message || err.message));\n      console.error('Error deleting PDF:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Toggle PDF selection\n  const togglePdfSelection = (id) => {\n    setSelectedPdfs(prev => {\n      if (prev.includes(id)) {\n        return prev.filter(pdfId => pdfId !== id);\n      } else {\n        return [...prev, id];\n      }\n    });\n  };\n\n  // Process a query using OpenAI\n  const processQuery = async (query) => {\n    try {\n      setQueryLoading(true);\n      setError(null);\n      \n      const response = await axios.post('/api/openai/query', {\n        query,\n        fileIds: selectedPdfs.length > 0 ? selectedPdfs : undefined\n      });\n      \n      setSearchResults(response.data.data);\n      return response.data.data;\n    } catch (err) {\n      setError('Error processing query: ' + (err.response?.data?.message || err.message));\n      console.error('Error processing query:', err);\n      throw err;\n    } finally {\n      setQueryLoading(false);\n    }\n  };\n\n  // Generate a summary using OpenAI\n  const generateSummary = async (query, language = \"Español\", modelParams = { model: \"gpt-4o-mini\" }) => {\n    try {\n      setSummaryLoading(true);\n      setError(null);\n      \n      // Si modelParams es un string (para compatibilidad con versiones anteriores), convertirlo a objeto\n      const modelConfig = typeof modelParams === 'string' \n        ? modelParams \n        : modelParams.model;\n        \n      const response = await axios.post('/api/openai/summary', {\n        query,\n        fileIds: selectedPdfs.length > 0 ? selectedPdfs : undefined,\n        language,\n        model: modelConfig,\n        // Añadir los parámetros avanzados separados del nombre del modelo\n        ...(typeof modelParams !== 'string' && {\n          temperature: modelParams.temperature,\n          max_tokens: modelParams.max_tokens,\n          top_p: modelParams.top_p,\n          frequency_penalty: modelParams.frequency_penalty,\n          presence_penalty: modelParams.presence_penalty\n        })\n      });\n      \n      setSummary(response.data.data);\n      return response.data.data;\n    } catch (err) {\n      setError('Error generating summary: ' + (err.response?.data?.message || err.message));\n      console.error('Error generating summary:', err);\n      throw err;\n    } finally {\n      setSummaryLoading(false);\n    }\n  };\n\n  // Vectorize a PDF for better search\n  const vectorizePdf = async (id) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await axios.post('/api/openai/vectorize', {\n        fileId: id\n      });\n      \n      // Update the PDF in the list\n      setPdfs(prev => prev.map(pdf => \n        pdf.id === id ? { ...pdf, vectorized: true } : pdf\n      ));\n      \n      return response.data.data;\n    } catch (err) {\n      setError('Error vectorizing PDF: ' + (err.response?.data?.message || err.message));\n      console.error('Error vectorizing PDF:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Clear search results\n  const clearSearchResults = () => {\n    setSearchResults(null);\n  };\n\n  // Clear summary\n  const clearSummary = () => {\n    setSummary(null);\n  };\n\n  return (\n    <PdfContext.Provider value={{\n      pdfs,\n      loading,\n      error,\n      selectedPdfs,\n      searchQuery,\n      searchResults,\n      summary,\n      summaryLoading,\n      queryLoading,\n      fetchPdfs,\n      uploadPdf,\n      deletePdf,\n      togglePdfSelection,\n      setSearchQuery,\n      processQuery,\n      generateSummary,\n      vectorizePdf,\n      clearSearchResults,\n      clearSummary,\n      setError\n    }}>\n      {children}\n    </PdfContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}